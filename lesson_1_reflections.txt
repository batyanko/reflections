How did viewing a diff between two versions of a file help you see the bug that was introduced?
It narrowed the search to the lines that have actually changed.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
It could allow me experimenting with different code alternatives without losing the old stable / working versions.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
Pros: You have the chance to create committs at the right places. Every commit has a good chance to compile. Only meaningful commits are created.
Cons: One might forget to commit when necessary, or misjudge when a commit is really needed.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Systems like git are aimed at managing projects, while other systems like Google Docs are aimed at more general purpose single file mangaging.

How can you use the commands git log and git diff to view the history of files?
With git log I view a list of all commits, that is versions of the project. And with git diff I compare two commits to see the speciffic differences.

How might using version control make you more confident to make changes that could break something?
version control keeps the old versions and compares these with each other, or with the new uncommitted changes.

Now that you have your workspace set up, what do you want to try using Git for?
I want to explore some project's versions.
